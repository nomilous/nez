// Generated by CoffeeScript 1.4.0
var AssertionError, Expectation;

AssertionError = require('assert').AssertionError;

Expectation = (function() {

  function Expectation(object, configuration) {
    this.validate(configuration);
    this.on = object;
  }

  Expectation.prototype.validate = function(configuration) {
    var count, key, _results;
    if (typeof configuration === 'undefined') {
      throw new AssertionError({
        message: 'undefined Expectation configuration'
      });
    }
    if (typeof configuration === 'string') {
      this.realizerName = configuration;
      this.realizerCall = 'createFunction';
      this.realizerType = 'mock';
      return;
    }
    if (typeof configuration === 'object') {
      if (configuration instanceof Array) {
        throw new AssertionError({
          message: 'Array not a valid Expectation configuration'
        });
      }
    }
    count = 0;
    _results = [];
    for (key in configuration) {
      this.realizerName = key;
      this.assignParameters(configuration[key]);
      if (configuration[key] instanceof Function) {
        this.substitute = configuration[key];
      }
      if (++count > 1) {
        throw new AssertionError({
          message: 'Multiple key hash not a valid Expectation configuration'
        });
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Expectation.prototype.assignParameters = function(parameters) {
    var key, _results;
    this.realizerCall = 'createFunction';
    this.realizerType = 'mock';
    _results = [];
    for (key in parameters) {
      if (key === 'as') {
        this.setRealizationConfig(parameters[key]);
        continue;
      }
      _results.push(this[key] = parameters[key]);
    }
    return _results;
  };

  Expectation.prototype.setRealizationConfig = function(parameter) {
    switch (parameter) {
      case 'mock':
        this.realizerCall = 'createFunction';
        return this.realizerType = 'mock';
      case 'spy':
        this.realizerCall = 'createFunction';
        return this.realizerType = 'spy';
      case 'get':
        this.realizerCall = 'createProperty';
        return this.realizerType = 'get';
      case 'set':
        this.realizerCall = 'createProperty';
        return this.realizerType = 'set';
    }
  };

  return Expectation;

})();

module.exports = Expectation;

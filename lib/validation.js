// Generated by CoffeeScript 1.4.0
var Realizer, Validation;

Realizer = require('./realizer');

require('colors');

require('should');

Validation = (function() {

  function Validation(expectation) {
    var call, name, object,
      _this = this;
    this.expectation = expectation;
    this.realization = {};
    call = this.expectation.realizerCall;
    name = this.expectation.realizerName;
    object = this.expectation.on;
    Realizer[call](name, object, this.expectation, function(realization) {
      return _this.realization = realization;
    });
  }

  Validation.prototype.validate = function(failedArray) {
    var description, expected, position, realized, received, seq;
    expected = this.expectation["with"];
    realized = this.realization.args;
    if (typeof expected === 'string') {
      expected = {
        1: expected
      };
    }
    if (typeof realized === 'string') {
      realized = {
        0: realized
      };
    }
    if (!(expected && realized)) {
      return;
    }
    description = this.description();
    received = {};
    for (seq in expected) {
      position = parseInt(seq) - 1;
      if (realized[position]) {
        received[seq] = realized[position];
      }
    }
    expected['0'] = description;
    received['0'] = description;
    try {
      return received.should.eql(expected);
    } catch (error) {
      return failedArray.push(error);
    }
  };

  Validation.prototype.description = function() {
    var description;
    description = "FAILED EXPECTATION on " + this.expectation.on.fing.ref + ".";
    if (this.expectation.realizerCall === 'createFunction') {
      description += "" + this.expectation.realizerName + "()";
    } else if (this.expectation.realizerType === 'set') {
      description += "" + this.expectation.realizerName + " (set)";
    } else {
      description += "" + this.expectation.realizerName + " (get)";
    }
    return description;
  };

  return Validation;

})();

module.exports = Validation;

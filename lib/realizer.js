// Generated by CoffeeScript 1.4.0
var AssertionError, Realizer;

AssertionError = require('assert').AssertionError;

if (typeof fing === 'undefined') {
  require('fing');
}

Realizer = (function() {

  function Realizer() {}

  Realizer.realizers = {};

  Realizer.createFunction = function(name, object, configuration, realization) {
    var key, originalFunction, realizer;
    key = object.fing.ref + ':' + name;
    if (this.realizers[key]) {
      this.realizers[key].realizations.push(realization);
      this.realizers[key].configs.push(configuration);
      return;
    }
    originalFunction = this.getOriginal(name, object);
    this.realizers[key] = {
      object: object,
      original: originalFunction,
      configs: [],
      realizations: []
    };
    realizer = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, areYouMad) {
      var config, original, realizerCallback;
      object = Realizer.realizers[key].object;
      original = Realizer.realizers[key].original;
      realizerCallback = Realizer.realizers[key].realizations.shift();
      config = Realizer.realizers[key].configs.shift();
      if (typeof realizerCallback === 'undefined') {
        throw new AssertionError({
          message: 'Unexpected call to ' + key
        });
      }
      realizerCallback({
        object: object,
        args: arguments
      });
      if (config.substitute) {
        return config.substitute(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, areYouMad);
      }
      if (config.as === 'spy') {
        return original(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, areYouMad);
      }
      return config.returning;
    };
    this.replaceOriginal(name, object, realizer);
    this.realizers[key].realizations.push(realization);
    return this.realizers[key].configs.push(configuration);
  };

  Realizer.createProperty = function(name, object, config, realization) {
    var key, originalProperty, realizer, target;
    target = this.createTarget(object);
    key = object.fing.ref + ':' + name + ':' + config.as;
    if (this.realizers[key]) {
      this.realizers[key].realizations.push(realization);
      this.realizers[key].configs.push(config);
      return;
    }
    originalProperty = target[name];
    this.realizers[key] = {
      object: object,
      original: originalProperty,
      configs: [],
      realizations: []
    };
    realizer = {
      get: function() {
        var original, realizerCallback, returns;
        object = Realizer.realizers[key].object;
        original = Realizer.realizers[key].original;
        config = Realizer.realizers[key].configs.shift();
        realizerCallback = Realizer.realizers[key].realizations.shift();
        returns = original;
        if (typeof realizerCallback === 'undefined') {
          throw new AssertionError({
            message: 'Unexpected call to ' + key
          });
        }
        if (typeof config.returning !== 'undefined') {
          returns = config.returning;
        }
        realizerCallback({
          object: object,
          args: returns
        });
        return returns;
      },
      set: function(value) {
        var original, realizerCallback;
        object = Realizer.realizers[key].object;
        original = Realizer.realizers[key].original;
        config = Realizer.realizers[key].configs.shift();
        realizerCallback = Realizer.realizers[key].realizations.shift();
        if (typeof realizerCallback === 'undefined') {
          throw new AssertionError({
            message: 'Unexpected call to ' + key
          });
        }
        realizerCallback({
          object: object,
          args: value
        });
        return original = value;
      }
    };
    Object.defineProperty(target, name, realizer);
    this.realizers[key].realizations.push(realization);
    return this.realizers[key].configs.push(config);
  };

  Realizer.createTarget = function(object) {
    if (object.fing.type === 'prototype') {
      return object.prototype;
    } else {
      return object;
    }
  };

  Realizer.getOriginal = function(name, object) {
    var originalFunction;
    if (object.fing.type === 'prototype') {
      return originalFunction = object.prototype[name];
    } else {
      return originalFunction = object[name];
    }
  };

  Realizer.replaceOriginal = function(name, object, fn) {
    if (object.fing.type === 'prototype') {
      return object.prototype[name] = fn;
    } else {
      return object[name] = fn;
    }
  };

  return Realizer;

})();

module.exports = Realizer;

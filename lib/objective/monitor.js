// Generated by CoffeeScript 1.6.3
var DirectoryMonitor, EventEmitter, Hound, autospawn, monitor, spawner,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

Hound = require('hound');

spawner = require('./spawner');

autospawn = false;

DirectoryMonitor = (function(_super) {
  __extends(DirectoryMonitor, _super);

  function DirectoryMonitor(opts) {
    if (opts == null) {
      opts = {};
    }
    this.monitors = {};
  }

  DirectoryMonitor.prototype.add = function(dirname, match, ref) {
    var event, watch, _i, _len, _ref, _results,
      _this = this;
    if (this.monitors[dirname] == null) {
      this.monitors[dirname] = watch = Hound.watch(dirname);
      _ref = ['create', 'change', 'delete'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push((function(event) {
          return watch.on(event, function(filename, stats) {
            if (match != null) {
              if (!filename.match(match)) {
                return;
              }
            }
            if (!(autospawn && ref === 'realizer')) {
              return _this.emit(event, filename, stats, ref);
            }
            return console.log({
              PENDING_SPAWN: filename
            });
          });
        })(event));
      }
      return _results;
    }
  };

  return DirectoryMonitor;

})(EventEmitter);

module.exports = monitor = function(opts) {
  if (opts.directory != null) {
    return monitor.dirs.add(opts.directory, opts.match, opts.ref);
  }
};

monitor.dirs || (monitor.dirs = new DirectoryMonitor);

Object.defineProperty(monitor, 'autospawn', {
  enumareable: true,
  get: function() {
    return autospawn;
  },
  set: function(value) {
    return autospawn = value === true;
  }
});

module.exports.DirectoryMonitor = DirectoryMonitor;

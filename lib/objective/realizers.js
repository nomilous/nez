// Generated by CoffeeScript 1.6.3
var SpawnerFactory, defer;

defer = require('when').defer;

SpawnerFactory = require('./spawner');

module.exports.createClass = function(classOpts, messageBus) {
  var api, fromfilename, realizers;
  realizers = {};
  fromfilename = {};
  console.log({
    TODO: 'realizer connected/not connected'
  });
  messageBus.use(function(msg, next) {
    var uuid;
    if (!(uuid = msg.uuid)) {
      return next();
    }
    switch (msg.event) {
      case 'connect':
      case 'reconnect':
        realizers[uuid] || (realizers[uuid] = {});
        realizers[uuid].notice = (function() {
          try {
            return msg.context.responder;
          } catch (_error) {}
        })();
        realizers[uuid].connected = true;
        return next();
      default:
        return next();
    }
  });
  return api = {
    autospawn: false,
    spawner: SpawnerFactory.createClass(classOpts, messageBus),
    get: function(opts) {
      var getting,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      getting = defer();
      process.nextTick(function() {
        var alreadySpawned, realizer;
        if (opts.uuid != null) {
          if (realizers[opts.uuid] != null) {
            return getting.resolve(realizers[opts.uuid]);
          }
          return getting.reject(new Error("Missing realizer uuid:" + opts.uuid));
        }
        if (opts.filename != null) {
          realizer = fromfilename[opts.filename];
          if (!api.autospawn || (alreadySpawned = realizer.token.localPID != null)) {
            return getting.resolve(realizer);
          }
          return api.spawner.spawn(realizer.token).then(function(token) {
            return getting.resolve(realizers[token.uuid]);
          }, function(error) {
            return getting.reject(error);
          });
        }
      });
      return getting.promise;
    },
    update: function(tokens) {
      var updating,
        _this = this;
      updating = defer();
      process.nextTick(function() {
        var filename, path, token, uuid;
        for (path in tokens) {
          token = tokens[path];
          uuid = token.uuid;
          if (token.type !== 'tree') {
            continue;
          }
          realizers[uuid] || (realizers[uuid] = {});
          realizers[uuid].token = token;
          realizers[uuid].connected = false;
          if (token.source == null) {
            continue;
          }
          switch (token.source.type) {
            case 'file':
              filename = token.source.filename;
              fromfilename[filename] = realizers[uuid];
          }
        }
        return updating.resolve();
      });
      return updating.promise;
    }
  };
};

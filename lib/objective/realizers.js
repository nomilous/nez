// Generated by CoffeeScript 1.6.3
var defer, spawner;

defer = require('when').defer;

spawner = require('./spawner');

module.exports.createClass = function(classOpts) {
  var api, fromfilename, realizers;
  realizers = {};
  fromfilename = {};
  return api = {
    autospawn: false,
    get: function(opts) {
      var getting,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      console.log({
        get: opts
      });
      getting = defer();
      process.nextTick(function() {
        var realizer;
        if (opts.filename != null) {
          realizer = fromfilename[opts.filename];
          console.log({
            AUTOSPAWN: api.autospawn
          });
          if (!api.autospawn) {
            return getting.resolve(realizer);
          }
          return spawner.spawn(classOpts, realizer.token);
        }
      });
      return getting.promise;
    },
    update: function(tokens) {
      var updating,
        _this = this;
      updating = defer();
      process.nextTick(function() {
        var filename, path, token, uuid;
        for (path in tokens) {
          token = tokens[path];
          uuid = token.uuid;
          if (token.type !== 'tree') {
            continue;
          }
          realizers[uuid] || (realizers[uuid] = {});
          realizers[uuid].token = token;
          if (token.source == null) {
            continue;
          }
          switch (token.source.type) {
            case 'file':
              filename = token.source.filename;
              fromfilename[filename] = realizers[uuid];
          }
        }
        return updating.resolve();
      });
      return updating.promise;
    }
  };
};

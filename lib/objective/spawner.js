// Generated by CoffeeScript 1.6.3
var ChildProcess, defer, path;

defer = require('when').defer;

ChildProcess = require('child_process');

path = require('path');

module.exports.createClass = function(opts, messageBus) {
  var waiting;
  waiting = {};
  messageBus.use(function(msg, next) {
    if (msg.context.title === 'realizer::connect') {
      console.log({
        HANDLE_CONNECT: msg.content
      });
    }
    return next();
  });
  return {
    spawn: function(token) {
      var spawning;
      if (token == null) {
        token = {};
      }
      spawning = defer();
      process.nextTick(function() {
        var args, child, runner;
        if (token.pid != null) {
          return spawning.reject(new Error("Already running realizer at pid: " + token.pid));
        }
        if (!((token.source != null) && token.source.type === 'file' && (token.source.filename != null))) {
          return spawning.reject(new Error("Realizer can only spawn local source"));
        }
        runner = path.normalize(__dirname + '/../../bin/realize');
        args = ['-c', '-p', opts.listening.port];
        if (opts.listening.transport !== 'https') {
          args.push('-X');
        }
        args.push(token.source.filename);
        child = ChildProcess.spawn(runner, args);
        child.stderr.on('data', function(data) {});
        child.stdout.on('data', function(data) {});
        return waiting[child.pid] = {
          promise: spawning,
          token: token
        };
      });
      return spawning.promise;
    }
  };
};

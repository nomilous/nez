// Generated by CoffeeScript 1.6.3
var ChildProcess, defer, path;

defer = require('when').defer;

ChildProcess = require('child_process');

path = require('path');

module.exports.createClass = function(opts, messageBus) {
  var waiting;
  waiting = {};
  messageBus.use(function(msg, next) {
    var promise, token, _ref;
    if (msg.context.title === 'realizer::connect') {
      if (waiting[msg.pid] != null) {
        _ref = waiting[msg.pid], promise = _ref.promise, token = _ref.token;
        if (token.uuid !== msg.uuid) {
          return next();
        }
        console.log({
          CONNECT: token.uuid,
          PID: msg.pid
        });
        token.localPID = msg.pid;
        promise.resolve(token);
        delete waiting[msg.pid];
      }
    }
    return next();
  });
  return {
    spawn: function(token) {
      var spawning;
      if (token == null) {
        token = {};
      }
      spawning = defer();
      process.nextTick(function() {
        var args, child, runner;
        if (token.localPID != null) {
          return spawning.reject(new Error("Already running realizer at pid: " + token.localPID));
        }
        if (!((token.source != null) && token.source.type === 'file' && (token.source.filename != null))) {
          return spawning.reject(new Error("Realizer can only spawn local source"));
        }
        runner = path.normalize(__dirname + '/../../bin/realize');
        args = ['-c', '-p', opts.listening.port];
        if (opts.listening.transport !== 'https') {
          args.push('-X');
        }
        args.push(token.source.filename);
        child = ChildProcess.spawn(runner, args);
        console.log({
          SPAWN: token.uuid,
          PID: child.pid
        });
        waiting[child.pid] = {
          promise: spawning,
          token: token
        };
        child.stderr.on('data', function(data) {});
        child.stdout.on('data', function(data) {});
        return child.on('exit', function(code, signal) {
          var promise, _ref;
          if (waiting[child.pid] == null) {
            return;
          }
          _ref = waiting[child.pid], promise = _ref.promise, token = _ref.token;
          return promise.reject(new Error("Realizer exited with code:" + code + ", signal:" + signal));
        });
      });
      return spawning.promise;
    }
  };
};

// Generated by CoffeeScript 1.6.3
var EventEmitter, Hound, Notice, Objective, Phrase, watchers;

Notice = require('notice');

Phrase = require('phrase');

Objective = require('./objective');

Hound = require('hound');

EventEmitter = require('events').EventEmitter;

watchers = {};

module.exports = function(opts, objectiveFn) {
  var Module, error, localopts, missing, required;
  missing = (function() {
    var _i, _len, _ref, _results;
    _ref = ['title', 'uuid', 'description'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      required = _ref[_i];
      if (opts[required] != null) {
        continue;
      }
      _results.push(required);
    }
    return _results;
  })();
  if (missing.length > 0) {
    console.log("objective(opts, objectiveFn) requires " + (missing.map(function(p) {
      return "opts." + p;
    }).join(', ')));
    process.exit(1);
  }
  localopts = {
    module: opts.module || '../defaults',
    "class": opts["class"] || 'Develop'
  };
  try {
    Module = require(localopts.module);
    if (Module[localopts["class"]] == null) {
      throw new Error("Could not initialize objective module(=" + localopts.module + ") does not define class(=" + localopts["class"] + ")");
    }
    Objective = Module[localopts["class"]];
  } catch (_error) {
    error = _error;
    try {
      delete opts.listen.secret;
    } catch (_error) {}
    try {
      delete opts.listening;
    } catch (_error) {}
    console.log({
      OPTS: opts,
      ERROR: error
    });
    process.exit(2);
  }
  return Notice.listen("objective/" + opts.uuid, opts, function(error, realizerHub) {
    var monitor, objective;
    if (error != null) {
      try {
        delete opts.listen.secret;
      } catch (_error) {}
      try {
        delete opts.listening;
      } catch (_error) {}
      console.log({
        OPTS: opts,
        ERROR: error
      });
      process.exit(3);
    }
    realizerHub.use(function(msg, next) {
      console.log(msg.content);
      return next();
    });
    objective = new Objective;
    monitor = new EventEmitter;
    return objective.configure(opts, function() {
      var recursor;
      try {
        recursor = Phrase.createRoot(opts, function(objectiveToken, objectiveNotice) {
          objectiveNotice.use(function(msg, next) {
            var directory, event, match, watcher, _fn, _i, _len, _ref;
            switch (msg.context.title) {
              case 'phrase::link:directory':
                directory = msg.directory;
                match = msg.match;
                if (watchers[directory] != null) {
                  return next();
                }
                watchers[directory] = watcher = Hound.watch(directory);
                _ref = ['create', 'change', 'delete'];
                _fn = function(event) {
                  return watcher.on(event, function(file) {
                    if (!file.match(match)) {
                      return;
                    }
                    return monitor.emit(event, file);
                  });
                };
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  event = _ref[_i];
                  _fn(event);
                }
                next();
                break;
              case 'phrase::boundry:assemble':
                return objective.onBoundryAssemble(msg.opts, function(error, phrase) {
                  msg.phrase = phrase;
                  msg.error = error;
                  return next();
                });
            }
            return next();
          });
          return objectiveToken.on('ready', function(_arg) {
            var tokens;
            tokens = _arg.tokens;
            return objective.startMonitor({}, {
              dirs: monitor
            }, tokens, function(token, opts) {
              return objectiveToken.run(token, opts);
            });
          });
        });
        return recursor('objective', objectiveFn || objective.defaultObjective);
      } catch (_error) {
        error = _error;
        try {
          delete opts.listen.secret;
        } catch (_error) {}
        try {
          delete opts.listening;
        } catch (_error) {}
        console.log({
          OPTS: opts,
          ERROR: error
        });
        return process.exit(4);
      }
    });
  });
};

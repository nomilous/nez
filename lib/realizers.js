// Generated by CoffeeScript 1.6.3
var Notice, factory, wait;

Notice = require('notice');

wait = require('also').schedule.wait;

factory = function(context, notice, callback) {
  var checksum, children, collection, pids, spawnedAt, startedAt, startedLag;
  collection = {};
  startedAt = {};
  children = {};
  checksum = {};
  spawnedAt = {};
  startedLag = {};
  pids = {};
  return Notice.listen('realizers', context, function(error, Realizers) {
    var integrations;
    Realizers.use(function(msg, next) {
      var id, properties, reply;
      switch (msg.context.title) {
        case 'realizer::start':
          properties = msg.properties;
          id = properties.id || properties.script;
          reply = msg.reply;
          collection[id] = reply;
          startedAt[id] = Date.now();
          if (spawnedAt[id] != null) {
            startedLag[id] = startedAt[id] - spawnedAt[id];
          }
          delete spawnedAt[id];
      }
      return next();
    });
    if (error != null) {
      return callback(error);
    }
    return callback(null, integrations = {
      task: function(title, ref) {
        return integrations.get(ref, function(error, realizer) {
          if (error != null) {
            return notice.event.bad('missing or broken realizer', {
              description: ref.id,
              error: error
            });
          }
          return realizer.task(title, ref);
        });
      },
      get: function(ref, callback) {
        var newsum;
        if (!((ref != null) && (ref.id != null))) {
          throw new Error('realizers.get(ref, callback) requires ref.id as the realizer id');
        }
        if (collection[ref.id] != null) {
          if (children[ref.id] != null) {
            if (checksum[ref.script] !== (newsum = context.tools.checksum.file(ref.script))) {
              console.log('TODO: respawn', ref);
            }
          }
          return callback(null, collection[ref.id]);
        }
        if (ref.script == null) {
          return callback(new Error('missing realizer'));
        }
        if (ref.script.match(/\.(lit)*coffee$/) == null) {
          return callback(new Error('nez supports only coffee-script realizers'));
        }
        process.env['UPLINK_transport'] = context.listening.transport;
        process.env['UPLINK_address'] = context.listening.address;
        process.env['UPLINK_port'] = context.listening.port;
        if (spawnedAt[ref.script] != null) {
          return notice.info('already waiting for realizer', {
            description: "pid:" + children[ref.script].pid + ", script:" + ref.script
          });
        }
        return context.tools.spawn(notice, {
          "arguments": [ref.script],
          exit: function(pid) {
            var id;
            id = pids[pid];
            delete collection[id];
            delete children[id];
            delete spawnedAt[id];
            return delete pids[pid];
          }
        }, function(error, child) {
          pids[child.pid] = ref.script;
          children[ref.script] = child;
          if (error == null) {
            spawnedAt[ref.script] = Date.now();
            checksum[ref.script] = newsum || context.tools.checksum.file(ref.script);
            wait({
              until: function() {
                return (collection[ref.script] != null) || (pids[child.pid] == null);
              }
            }, function() {
              if (collection[ref.script] == null) {
                return callback(new Error('realizer exited before connecting'));
              }
              return callback(null, collection[ref.script]);
            }).apply(null);
          }
          return child.stdout.on('data', function(data) {
            var line, lines, _i, _len, _results;
            lines = data.toString().split('\n');
            _results = [];
            for (_i = 0, _len = lines.length; _i < _len; _i++) {
              line = lines[_i];
              _results.push(console.log('---------->', line));
            }
            return _results;
          });
        });
      }
    });
  });
};

module.exports = factory;

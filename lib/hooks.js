// Generated by CoffeeScript 1.4.0
var Hooks, hooks;

require('fing');

Hooks = (function() {

  function Hooks(subscribe) {
    subscribe('edge', this.handle);
  }

  Hooks.prototype.set = function(node, config) {
    var key, _results;
    _results = [];
    for (key in config) {
      if (key === 'beforeEach' || key === 'afterEach') {
        node.hooks[key] = config[key];
      }
      if (key === 'beforeAll' || key === 'afterAll') {
        _results.push(node.hooks[key] = config[key]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Hooks.prototype.handle = function(placeholder, nodes) {
    var fromHooks, hook, toHooks, _results;
    fromHooks = nodes.from.hooks;
    for (hook in fromHooks) {
      if (hook === 'beforeAll') {
        if (fromHooks[hook]) {
          fromHooks[hook]();
        }
        delete fromHooks[hook];
      } else if (hook === 'beforeEach') {
        if (fromHooks[hook]) {
          fromHooks[hook]();
        }
      }
    }
    toHooks = nodes.to.hooks;
    _results = [];
    for (hook in toHooks) {
      if (hook === 'afterAll') {
        if (toHooks[hook]) {
          toHooks[hook]();
        }
        _results.push(delete toHooks[hook]);
      } else if (hook === 'afterEach') {
        if (toHooks[hook]) {
          _results.push(toHooks[hook]());
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Hooks;

})();

hooks = {};

module.exports = {
  getFor: function(stack) {
    var _name;
    return hooks[_name = stack.fing.ref] || (hooks[_name] = new Hooks(stack.on));
  }
};

// Generated by CoffeeScript 1.4.0
var ActiveNode, Defaults, Http, Injector, Plex, PluginLoader, Runtime, Stack;

Defaults = require('./defaults');

PluginLoader = require('./plugin_loader');

Injector = require('nezcore').injector;

Runtime = require('./exec/nez').exec;

Stack = require('./stack');

Http = require('http');

Plex = require('plex');

module.exports = ActiveNode = (function() {

  function ActiveNode(label, config, injectable) {
    var nodeID, tags,
      _this = this;
    this.label = label;
    this.config = config;
    this.injectable = injectable;
    this.outerValidate();
    nodeID = process.env.NODE_ID;
    tags = process.env.NODE_TAGS || '';
    this.config.as(nodeID, tags.split(' '), function(activeConfig) {
      _this.innerValidate(activeConfig);
      return _this.start(activeConfig);
    });
  }

  ActiveNode.prototype.start = function(activeConfig) {
    var match, server, service, services, stacker, type, validate, _i, _len, _ref,
      _this = this;
    console.log('START:', JSON.stringify(activeConfig, null, 2));
    if (typeof activeConfig._objective !== 'undefined') {
      type = '_objective';
      if (typeof activeConfig[type].plex !== 'undefined') {
        server = Http.createServer();
        server.listen(20202, 'localhost', function() {
          return console.log('[ActiveNode] - listening @ %s:%s', server.address().address, server.address().port);
        });
        activeConfig[type].plex.listen.server = server;
      }
    } else if (typeof activeConfig._realizer !== 'undefined') {
      type = '_realizer';
    } else {
      throw new Error("ActiveNode should be an Objective or a Realizer");
    }
    this.stack = new Stack(this);
    this.config._class = activeConfig[type]["class"];
    this.plugin = PluginLoader.load(this.stack, this.config);
    if (typeof activeConfig[type].plex !== 'undefined') {
      activeConfig[type].plex.protocol = this.plugin.bind;
      this.context = Plex.start(activeConfig[type].plex);
    }
    if (type === '_objective') {
      Runtime(this.label, this.config);
    }
    services = [];
    stacker = function() {
      return _this.stack.stacker.apply(_this.stack, arguments);
    };
    stacker.link = this.stack.stacker.link;
    services.push(stacker);
    if (type === '_realizer') {
      validate = function() {
        return _this.stack.validate.apply(_this.stack, arguments);
      };
      services.push(validate);
    }
    if (typeof this.config["with"] !== 'undefined') {
      _ref = this.config["with"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (typeof service !== 'string') {
          services.push(service);
          continue;
        }
        try {
          if (match = service.match(/^(.*):(.*)$/)) {
            services.push(Injector.support.findModule({
              module: match[1]
            })[match[2]]);
          } else {
            services.push(Injector.support.findModule({
              module: service
            }));
          }
        } catch (error) {
          console.log("[ActiveNode] - Error loading service '" + service + "'");
          services.push(void 0);
        }
      }
    }
    if (typeof this.injectable === 'function') {
      return Injector.inject(services, this.injectable);
    }
  };

  ActiveNode.prototype.innerValidate = function(config) {};

  ActiveNode.prototype.outerValidate = function() {
    var match;
    if (typeof this.label !== 'string') {
      throw new Error("ActiveNode requires 'label' string as arg1");
    }
    if (typeof this.config !== 'object') {
      throw new Error("ActiveNode requires config hash as arg2");
    }
    if (typeof this.config.as === 'undefined') {
      this.config.as = process.env.NODE_AS;
    }
    if (typeof this.config.as === 'string') {
      if (typeof Defaults[this.config.as] !== 'undefined') {
        this.config.as = Defaults[this.config.as];
      } else {
        try {
          if (match = this.config.as.match(/^(.*):(.*)$/)) {
            this.config.as = require(match[1])[match[2]];
          } else {
            this.config.as = require(this.config.as);
          }
        } catch (error) {
          console.log("[ActiveNode] - FAILED to configure as '" + this.config.as + "'");
          throw error;
        }
      }
    }
    if (typeof this.injectable !== 'function') {
      throw new Error("ActiveNode requires injectable function arg3");
    }
  };

  return ActiveNode;

})();

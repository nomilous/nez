// Generated by CoffeeScript 1.4.0
var ActiveNode, Defaults, Http, Plex;

Defaults = require('./defaults');

Http = require('http');

Plex = require('plex');

module.exports = ActiveNode = (function() {

  function ActiveNode(label, config, injectable) {
    var nodeID, tags,
      _this = this;
    this.label = label;
    this.config = config;
    this.injectable = injectable;
    this.outerValidate();
    nodeID = process.env.NODE_ID;
    tags = process.env.NODE_TAGS || '';
    this.config._as(nodeID, tags.split(' '), function(activeConfig) {
      _this.innerValidate(activeConfig);
      return _this.start(activeConfig);
    });
  }

  ActiveNode.prototype.start = function(activeConfig) {
    var server,
      _this = this;
    console.log('START:', JSON.stringify(activeConfig, null, 2));
    server = Http.createServer();
    server.listen(20202, 'localhost', function() {
      return console.log('[ActiveNode] - listening @ %s:%s', server.address().address, server.address().port);
    });
    activeConfig._objective.proxy.listen.server = server;
    return this.context = Plex.start(activeConfig._objective.proxy);
  };

  ActiveNode.prototype.innerValidate = function(config) {};

  ActiveNode.prototype.outerValidate = function() {
    if (typeof this.label !== 'string') {
      throw new Error("ActiveNode requires 'label' string as arg1");
    }
    if (typeof this.config !== 'object') {
      throw new Error("ActiveNode requires config hash as arg2");
    }
    if (typeof this.config.as === 'undefined') {
      if (typeof this.config._as !== 'function') {
        throw new Error("ActiveNode requires behaviour definition in config._as");
      }
    } else {
      if (typeof Defaults[this.config.as] === 'undefined') {
        throw new Error("ActiveNode as '" + this.config.as + "' is not defined");
      }
      this.config._as = Defaults[this.config.as];
    }
    if (typeof this.injectable !== 'function') {
      throw new Error("ActiveNode requires injectable function arg3");
    }
  };

  return ActiveNode;

})();

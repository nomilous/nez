// Generated by CoffeeScript 1.4.0
var Inflection, Injector, Nez, fs, wrench;

require('fing');

Nez = require('./nez');

Inflection = require('inflection');

fs = require('fs');

wrench = require('wrench');

module.exports = Injector = {
  inject: function() {
    var func, key, klass, module;
    for (key in arguments) {
      func = arguments[key];
    }
    klass = arguments[0];
    module = Injector.findModule(klass);
    return func(require(module));
  },
  findModule: function(klass) {
    var calls, depth, file, match, name, relative, repoRoot, sdir, searchPath, sfile, srcDir, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    name = Inflection.underscore(klass);
    sfile = void 0;
    sdir = void 0;
    relative = '';
    depth = 0;
    _ref = fing.trace();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      calls = _ref[_i];
      if (match = calls.file.match(/(.*)\/spec\/(.*)_spec\./)) {
        repoRoot = match[1];
        depth = match[2].split('/').length;
      }
    }
    _ref1 = ['lib', 'app'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      srcDir = _ref1[_j];
      searchPath = repoRoot + ("/" + srcDir);
      if (fs.existsSync(searchPath)) {
        _ref2 = wrench.readdirSyncRecursive(searchPath);
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          file = _ref2[_k];
          if (match = file.match(new RegExp("^(.*" + name + ")\.(coffee|js)$"))) {
            if (sfile) {
              console.log("TODO: name: '../' as inject options");
              throw "Found two source files for module '" + name + "'";
            } else {
              sfile = match[1];
              sdir = srcDir;
            }
          }
        }
      }
    }
    if (!sfile) {
      throw "Found no source files for module '" + name + "'";
    }
    while (depth-- > 0) {
      relative += '../';
    }
    return relative + ("" + sdir + "/" + sfile);
  }
};

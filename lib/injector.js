// Generated by CoffeeScript 1.4.0
var Inflection, Injector, Nez, fs, wrench;

require('fing');

Nez = require('./nez');

Inflection = require('inflection');

fs = require('fs');

wrench = require('wrench');

module.exports = Injector = {
  inject: function() {
    var arg, key, module, objective, service, skip, stack, stacker, testFunction, validator, _i, _len, _ref;
    objective = arguments[0];
    console.log('(test)', objective);
    Nez = require('./nez');
    stack = Nez.link(objective);
    validator = stack.validator;
    stacker = stack.stacker;
    for (key in arguments) {
      testFunction = arguments[key];
    }
    module = Injector.findModule(objective);
    skip = 0;
    service = [];
    _ref = testFunction.fing.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (!(++skip > 3)) {
        continue;
      }
      if (arg.name.match(/^[A-Z]/)) {
        service.push(require(Injector.findModule(arg.name)));
      } else {
        service.push(require(arg.name));
      }
    }
    return testFunction(require(module), validator, stacker, service[0], service[1], service[2], service[3], service[4], service[5], service[6], service[7], service[8], service[9], service[10], service[11], service[12], service[13], service[14], service[15], service[16], service[17], service[18], service[19], service[20], service[21]);
  },
  findModule: function(klass) {
    var calls, depth, file, match, name, repoRoot, searchPath, source, srcDir, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    name = Inflection.underscore(klass);
    source = void 0;
    _ref = fing.trace();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      calls = _ref[_i];
      if (match = calls.file.match(/(.*)\/spec\/(.*)_spec\./)) {
        repoRoot = match[1];
        depth = match[2].split('/').length;
      }
    }
    _ref1 = ['lib', 'app'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      srcDir = _ref1[_j];
      searchPath = repoRoot + ("/" + srcDir);
      if (fs.existsSync(searchPath)) {
        _ref2 = wrench.readdirSyncRecursive(searchPath);
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          file = _ref2[_k];
          if (match = file.match(new RegExp("^(.*" + name + ")\.(coffee|js)$"))) {
            if (source) {
              console.log("TODO: name: '../' as inject options");
              throw "Found two source files for module '" + name + "'";
            } else {
              source = "" + searchPath + "/" + match[1];
            }
          }
        }
      }
    }
    if (!source) {
      throw "Found no source files for module '" + name + "'";
    }
    return source;
  }
};

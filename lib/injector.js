// Generated by CoffeeScript 1.4.0
var Exception, Inflection, Injector, Nez, fs, wrench;

require('fing');

Nez = require('./nez');

Inflection = require('inflection');

fs = require('fs');

wrench = require('wrench');

Exception = require('./exception');

module.exports = Injector = {
  realize: function() {
    var key, module, objective, stack, stacker, testFunction, validator;
    objective = arguments[0];
    module = Injector.findModule(objective);
    Nez = require('./nez');
    stack = Nez.link();
    stack.name = objective;
    validator = stack.validator;
    stacker = stack.stacker;
    for (key in arguments) {
      testFunction = arguments[key];
    }
    return Injector.inject([require(module), validator, stacker], testFunction);
  },
  inject: function() {
    var fn, key, list;
    if (typeof arguments[0] === 'function') {
      fn = arguments[0];
      return fn.apply(null, Injector.loadServices(fn.fing.args));
    } else {
      list = arguments[0];
      for (key in arguments) {
        fn = arguments[key];
      }
      return fn.apply(null, Injector.loadServices(fn.fing.args, list));
    }
  },
  loadServices: function(args, list) {
    var arg, module, services, skip, _i, _len;
    if (list == null) {
      list = [];
    }
    skip = list.length;
    services = list;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (skip-- > 0) {
        continue;
      }
      if (arg.name.match(/^[A-Z]/)) {
        services.push(require(Injector.findModule(arg.name)));
      } else {
        try {
          module = require(arg.name);
        } catch (error) {
          throw error;
        }
        services.push(module);
      }
    }
    return services;
  },
  findModule: function(klass) {
    var calls, depth, file, match, name, repoRoot, searchPath, source, srcDir, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    name = Inflection.underscore(klass);
    source = void 0;
    _ref = fing.trace();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      calls = _ref[_i];
      if (match = calls.file.match(/(.*)\/spec\/(.*)_spec\./)) {
        repoRoot = match[1];
        depth = match[2].split('/').length;
      }
    }
    if (typeof repoRoot === 'undefined') {
      repoRoot = require('./objective').root;
    }
    _ref1 = ['lib', 'app'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      srcDir = _ref1[_j];
      searchPath = repoRoot + ("/" + srcDir);
      if (fs.existsSync(searchPath)) {
        _ref2 = wrench.readdirSyncRecursive(searchPath);
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          file = _ref2[_k];
          if (match = file.match(new RegExp("^(.*" + name + ")\.(coffee|js)$"))) {
            if (source) {
              throw Exception.create('MATCH_ERROR', "Found more than 1 source for module '" + name + "'");
            } else {
              source = "" + searchPath + "/" + match[1];
            }
          }
        }
      }
    }
    if (!source) {
      throw Exception.create('MATCH_ERROR', "Found no source files for module '" + name + "'");
    }
    return source;
  }
};

// Generated by CoffeeScript 1.4.0
var Node, Notifyier, Stack, notifier, stack;

require('fing');

Node = require('./node');

Notifyier = require('./notifier');

stack = void 0;

notifier = void 0;

module.exports = Stack = (function() {

  function Stack(name) {
    this.name = name;
    this.stack = [];
    this.classes = [];
    this.node = new Node('root');
    this.end = false;
    notifier = Notifyier.create(this.name, {
      start: {
        description: 'Enters root node'
      },
      push: {
        description: 'Enters a node'
      },
      pop: {
        description: 'Exits a node'
      },
      end: {
        description: 'Exits root node'
      }
    });
    this.walker = this.tree = this.node.edges;
    stack = this;
  }

  Stack.prototype.stacker = function(label, callback) {
    return stack.push(arguments);
  };

  Stack.prototype.on = function(event, callback) {
    return notifier.on(event, callback);
  };

  Stack.prototype.once = function(event, callback) {
    return notifier.once(event, callback);
  };

  Stack.prototype.push = function(args) {
    var callback, klass, label, node;
    if (this.stack.length === 0) {
      notifier.emit('start', '');
    }
    label = args[0];
    callback = args[1];
    klass = this.pendingClass || this.name;
    if (callback && callback.fing.args.length > 0) {
      this.pendingClass = callback.fing.args[0].name;
    }
    if (label) {
      this.node = new Node(label, {
        callback: callback,
        "class": klass
      });
      notifier.emit('push', '');
      this.stack.push(this.node);
      this.walker.push(this.node);
      this.walker = this.node.edges;
      this.classes.push(klass);
      try {
        if (callback) {
          this.node.callback(this.stacker);
        }
      } catch (error) {
        if (error.name = 'AssertionError') {
          this.validate();
        } else {
          throw error;
        }
      }
      node = this.stack.pop();
      notifier.emit('pop', '');
      if (this.stack.length > 0) {
        this.node = this.stack[this.stack.length - 1];
        this.walker = this.node.edges;
      }
      this.pendingClass = this.classes.pop();
    }
    if (this.stack.length === 0) {
      return notifier.emit('end', '');
    }
  };

  Stack.prototype.validator = function(done) {
    return stack.validate(done);
  };

  Stack.prototype.validate = function(done) {
    var leafNode, node, testString, _i, _len, _ref;
    testString = '';
    leafNode = void 0;
    if (this.stack) {
      _ref = this.stack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        testString += "" + node["class"] + " " + node.label.bold + " ";
        leafNode = node;
      }
      console.log(testString);
    }
    if (done) {
      return done();
    }
  };

  return Stack;

})();

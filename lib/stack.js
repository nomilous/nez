// Generated by CoffeeScript 1.4.0
var Hooks, Link, Node, Notifyier, Plugins, Stack, injector, notifier, stack;

if (typeof fing === 'undefined') {
  require('fing');
}

Node = require('./node');

Notifyier = require('./notifier');

injector = require('nezcore').injector;

Hooks = require('./hooks');

Link = require('./link');

Plugins = require('./plugin_register');

stack = void 0;

notifier = void 0;

module.exports = Stack = (function() {

  function Stack(name) {
    this.name = name;
    this.stack = [];
    this.classes = [];
    this.root = new Node('root', {
      stack: this
    });
    this.node = this.root;
    this.end = false;
    notifier = Notifyier.create(this.name, {
      begin: {
        description: 'Enters root node'
      },
      push: {
        description: 'Enters a node'
      },
      pop: {
        description: 'Exits a node'
      },
      end: {
        description: 'Exits root node'
      },
      edge: {
        description: 'Edge traversal'
      }
    });
    stack = this;
    this.hooks = Hooks.getFor(stack);
    if (typeof this.stacker.link !== 'function') {
      Object.defineProperty(this.stacker, 'link', {
        get: function() {
          return Link.linker;
        }
      });
    }
  }

  Stack.prototype.stacker = function(label, callback) {
    return stack.push(arguments);
  };

  Stack.prototype.ancestorsOf = function(node) {
    var ancestor, ancestors, _i, _len, _ref;
    ancestors = [];
    _ref = this.stack;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ancestor = _ref[_i];
      if (node === ancestor) {
        break;
      }
      ancestors.push(ancestor);
    }
    return ancestors;
  };

  Stack.prototype.on = function(event, callback) {
    return notifier.on(event, callback);
  };

  Stack.prototype.once = function(event, callback) {
    return notifier.once(event, callback);
  };

  Stack.prototype.push = function(args) {
    var callback, from, klass, label;
    from = this.node;
    label = args[0];
    callback = args[1];
    klass = this.pendingClass || this.name;
    if (typeof label === 'undefined') {
      return;
    }
    if (typeof label !== 'string') {
      if (this.hooks.set(from, label)) {
        return;
      }
    }
    this.node = new Node(label, {
      callback: callback,
      stack: stack,
      "class": klass
    });
    Plugins.handle(this.node);
    if (callback && callback.fing.args.length > 0) {
      this.pendingClass = callback.fing.args[0].name;
    }
    if (label) {
      notifier.emit('edge', null, {
        "class": 'Tree.Leafward',
        from: from,
        to: this.node
      });
      this.stack.push(this.node);
      this.classes.push(klass);
      try {
        if (callback) {
          injector.inject([this.stacker], callback);
        }
      } catch (error) {
        if (error.name = 'AssertionError') {
          this.validate(null, error);
        } else {
          console.log(error.red);
          console.log(error.stack);
          throw error;
        }
      }
      from = this.stack.pop();
      if (this.stack.length === 0) {
        this.node = this.root;
      } else {
        this.node = this.stack[this.stack.length - 1];
      }
      notifier.emit('edge', null, {
        "class": 'Tree.Rootward',
        from: from,
        to: this.node
      });
      return this.pendingClass = this.classes.pop();
    }
  };

  Stack.prototype.validator = function(done) {
    return stack.validate(done);
  };

  Stack.prototype.validate = function(done, error) {
    var leafNode, node, testString, _i, _len, _ref;
    testString = '';
    leafNode = void 0;
    if (this.stack) {
      _ref = this.stack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        testString += "" + node["class"] + " " + node.label.bold + " ";
        leafNode = node;
      }
      if (error) {
        console.log('FAILED:'.red, testString);
        console.log(error.red);
        console.log(error.stack);
      } else {
        console.log('PASSED:'.green, testString);
      }
    }
    if (done) {
      return done();
    }
  };

  return Stack;

})();

// Generated by CoffeeScript 1.4.0
var Stack, stack,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

require('fing');

Stack = (function() {

  Stack.prototype.className = 'Stack';

  function Stack(name) {
    this.name = name;
    this.pusher = __bind(this.pusher, this);

    this.stack = [];
  }

  Stack.prototype.pusher = function(label, callback) {
    if (label) {
      return this.push(arguments);
    }
    return this.end();
  };

  Stack.prototype.push = function(args) {
    var callback, node;
    callback = args[1];
    node = {
      callback: callback,
      "class": this.pendingClass || this.name,
      label: args[0]
    };
    if (callback && callback.fing.args.length > 0) {
      this.pendingClass = callback.fing.args[0].name;
    }
    this.stack.push(node);
    if (node.callback) {
      return node.callback(this.pusher);
    }
  };

  Stack.prototype.end = function() {
    var node;
    node = this.stack.pop();
    console.log('end() popped:', node);
    if (node.callback) {
      return node.callback(this.pusher);
    }
  };

  Stack.prototype.argName = function(fn) {};

  return Stack;

})();

module.exports = stack = {
  stacks: {},
  create: function(name) {
    var newStack;
    newStack = new Stack(name);
    stack.stacks[name] = newStack;
    return newStack.pusher;
  },
  get: function(name) {
    return stack.stacks[name];
  }
};

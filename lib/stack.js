// Generated by CoffeeScript 1.4.0
var Hooks, Link, Node, Notifyier, Plugins, Stack, injector, notifier,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

require('fing');

Node = require('./node');

Notifyier = require('./notifier');

injector = require('nezcore').injector;

Hooks = require('./hooks');

Link = require('./link');

Plugins = require('./plugin_register');

notifier = void 0;

module.exports = Stack = (function() {

  function Stack(activeNode) {
    this.activeNode = activeNode;
    this.stacker = __bind(this.stacker, this);

    this.name = this.activeNode.label;
    this.stack = [];
    this.classes = [];
    this.root = new Node('root', {
      stack: this
    });
    this.node = this.root;
    this.end = false;
    notifier = Notifyier.create(this.name, {
      edge: {
        description: 'Edge traversal'
      },
      begin: {
        description: 'Walker enters the branch'
      },
      end: {
        description: 'Walker exits the branch or Exception'
      }
    });
    if (typeof this.stacker.link !== 'function') {
      Object.defineProperty(this.stacker, 'link', {
        get: function() {
          return Link.linker;
        }
      });
    }
  }

  Stack.prototype.stacker = function(label, callback) {
    return this.push(label, callback);
  };

  Stack.prototype.on = function(event, callback) {
    return notifier.on(event, callback);
  };

  Stack.prototype.once = function(event, callback) {
    return notifier.once(event, callback);
  };

  Stack.prototype.push = function(label, fn) {
    var from, klass;
    if (this.stack.length === 0) {
      notifier.emit('begin', null, this);
    }
    from = this.node;
    klass = this.pendingClass || this.name;
    if (typeof label === 'undefined') {
      return;
    }
    if (typeof label !== 'string') {
      if (this.hooks.set(from, label)) {
        return;
      }
    }
    this.node = new Node(label, {
      "function": fn,
      "class": klass
    });
    Plugins.handle(this.node);
    if (fn && fn.fing.args.length > 0) {
      this.pendingClass = fn.fing.args[0].name;
    }
    if (label) {
      notifier.emit('edge', null, {
        "class": 'Tree.Leafward',
        from: from,
        to: this.node
      });
      this.stack.push(this.node);
      this.classes.push(klass);
      try {
        if (fn) {
          injector.inject([this.stacker], fn);
        }
      } catch (error) {
        console.log('raising error', this.stack.length);
        this.validate(null, error);
        notifier.emit('end', error, this);
        return;
      }
      from = this.stack.pop();
      if (this.stack.length === 0) {
        this.node = this.root;
      } else {
        this.node = this.stack[this.stack.length - 1];
      }
      notifier.emit('edge', null, {
        "class": 'Tree.Rootward',
        from: from,
        to: this.node
      });
      this.pendingClass = this.classes.pop();
      if (this.stack.length === 0) {
        return notifier.emit('end', null, this);
      }
    }
  };

  Stack.prototype.validate = function(done, error) {
    if (this.activeNode.plugin && this.activeNode.plugin.validate) {
      return this.activeNode.plugin.validate(this.stack, error, function() {
        if (done) {
          return done();
        }
      });
    }
  };

  return Stack;

})();

// Generated by CoffeeScript 1.4.0
var Notification, Realization,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Notification = require('./notification');

module.exports = Realization = Realization = (function(_super) {

  __extends(Realization, _super);

  function Realization(object) {
    this.object = object;
  }

  Realization.prototype.createFunction = function(name, opts) {
    var _this = this;
    this.name = name;
    if (opts == null) {
      opts = {};
    }
    this.realized = {};
    this.originalFunction = this.object[this.name];
    return this.object[this.name] = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, areYouMad) {
      _this.realized.args = _this.slide(arguments, 1);
      if (opts.returns) {
        return opts.returns;
      }
      return _this.originalFunction.call(_this.object, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, areYouMad);
    };
  };

  Realization.prototype.createProperty = function(name, opts) {
    this.name = name;
    if (opts == null) {
      opts = {};
    }
  };

  Realization.prototype.realize = function(functionArgs) {
    this.functionArgs = functionArgs;
  };

  Realization.prototype.slide = function(args, amount) {
    var key, newKey, slid;
    slid = {};
    for (key in args) {
      newKey = (parseInt(key) + amount).toString();
      slid[newKey] = args[key];
    }
    return slid;
  };

  return Realization;

})(Notification);

// Generated by CoffeeScript 1.4.0
var Expectation, Nez, Realization;

require('should');

Nez = (function() {

  function Nez() {}

  Nez.debug = false;

  Nez.expectArray = [];

  Nez.expectIndex = {};

  Nez.calledArray = [];

  Nez.failedArray = [];

  Nez.test = function(callback) {
    var expectation, expectedArg, expectedArgs, functionName, key, location, realization, receivedArg, receivedArgs;
    if (Nez.debug) {
      console.log('\ntest() runs with:', callback, '\n');
    }
    Nez.failedArray.length = 0;
    while (Nez.calledArray.length > 0) {
      realization = Nez.calledArray.shift();
      functionName = realization.functionName;
      if (Nez.debug) {
        console.log('\ntest() found that function:', functionName, 'was called\n');
      }
      location = Nez.expectIndex[functionName].shift();
      if (location === void 0) {
        realization.failed = 'Was Called Too Often';
        Nez.failedArray.push(realization);
        continue;
      }
      expectation = Nez.expectArray[location];
      expectation.realization = realization;
      if (Nez.debug) {
        console.log('\ntest() updated expectation :', expectation, '\n');
      }
    }
    while (Nez.expectArray.length > 0) {
      expectation = Nez.expectArray.shift();
      if (expectation.realization) {
        if (expectation.functionArgs) {
          expectedArgs = expectation.functionArgs;
          receivedArgs = expectation.realization.functionArgs;
          if (Nez.debug) {
            console.log("EXPECTED:", expectedArgs, typeof expectedArgs);
          }
          for (key in expectedArgs) {
            expectedArg = expectedArgs[key];
            receivedArg = receivedArgs[key];
            try {
              if (typeof expectedArg === 'object') {
                expectedArg.should.eql(receivedArg);
              } else {
                expectedArg.should.equal(receivedArg);
              }
            } catch (error) {
              expectation.failed = 'Argument Mismatch';
              expectation.exception = error;
              Nez.failedArray.push(expectation);
            }
          }
        }
      } else {
        expectation.failed = 'Was Not Called';
        Nez.failedArray.push(expectation);
      }
      expectation.obj[expectation.functionName] = expectation.functionOrig;
    }
    if (Nez.debug) {
      console.log('\ntest() found the following unrealized:', Nez.failedArray, '\n');
    }
    Nez.calledArray.length = 0;
    Nez.expectIndex = {};
    Nez.debug = false;
    return callback();
  };

  return Nez;

}).call(this);

Realization = (function() {

  function Realization(functionName, functionArgs) {
    this.functionName = functionName;
    this.functionArgs = functionArgs;
    this.type = 'Realization';
    if (Nez.debug) {
      console.log('\nnew realization', this.functionName, 'with:', this.args, '\n');
    }
  }

  return Realization;

})();

Expectation = (function() {

  function Expectation(functionName, expectationParams, functionOrig, obj) {
    var args, key,
      _this = this;
    this.functionName = functionName;
    this.expectationParams = expectationParams;
    this.functionOrig = functionOrig;
    this.obj = obj;
    this.type = 'Expectation';
    if (Nez.debug) {
      console.log('\nnew expectation', this.functionName, '\n');
    }
    if (this.functionName === 'expectCall') {
      return;
    }
    args = this.expectationParams["with"];
    if (args === void 0) {
      return;
    }
    switch (typeof args) {
      case 'number':
      case 'string':
        this.functionArgs = {
          0: args
        };
        break;
      case 'function':
        this.functionArgs = {
          0: args
        };
        break;
      case 'object':
        if (args instanceof Array) {
          this.functionArgs = {
            0: args
          };
        } else {
          for (key in args) {
            if (typeof key !== 'number') {
              this.functionArgs = {
                0: args
              };
              break;
            }
          }
          this.functionArgs = args;
        }
        break;
      default:
        Nez.debug = true;
        console.log("MISSING TYPE:", typeof args);
    }
    this.realization = null;
    this.obj[this.functionName] = function() {
      var call;
      if (Nez.debug) {
        console.log('\n', _this.functionName, '() runs\n');
      }
      call = new Realization(_this.functionName, arguments);
      return Nez.calledArray.push(call);
    };
  }

  return Expectation;

})();

Object.prototype.expectCall = function(xpect) {
  var fName, x, _base, _results;
  if (Nez.debug) {
    console.log('\n', 'expectCall() to:', xpect, '\n');
  }
  _results = [];
  for (fName in xpect) {
    x = new Expectation(fName, xpect[fName], this[fName], this);
    if (x.functionName === 'expectCall') {
      continue;
    }
    Nez.expectArray.push(x);
    (_base = Nez.expectIndex)[fName] || (_base[fName] = []);
    Nez.expectIndex[fName].push(Nez.expectArray.length - 1);
    if (Nez.debug) {
      _results.push(console.log('\nexpectIndex with: ', Nez.expectIndex, '\n'));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

module.exports = Nez;

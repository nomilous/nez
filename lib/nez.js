// Generated by CoffeeScript 1.4.0
var Expectation, Nez, Realization;

Nez = (function() {

  function Nez() {}

  Nez.debug = false;

  Nez.expectArray = [];

  Nez.calledArray = [];

  Nez.test = function(callback) {
    var expectation;
    if (Nez.debug) {
      console.log('\ntest() runs with:', callback, '\n');
    }
    while (Nez.expectArray.length > 0) {
      expectation = Nez.expectArray.shift();
      expectation.obj[expectation.functionName] = expectation.functionOrig;
    }
    Nez.calledArray.length = 0;
    return callback();
  };

  return Nez;

}).call(this);

Realization = (function() {

  function Realization(functionName) {
    this.functionName = functionName;
  }

  return Realization;

})();

Expectation = (function() {

  function Expectation(functionName, functionArgs, functionOrig, obj) {
    var _this = this;
    this.functionName = functionName;
    this.functionArgs = functionArgs;
    this.functionOrig = functionOrig;
    this.obj = obj;
    this.obj[this.functionName] = function() {
      var call;
      if (_this.debug) {
        console.log('\n', _this.functionName, '() runs\n');
      }
      call = new Realization(_this.functionName);
      return Nez.calledArray.push(call);
    };
  }

  return Expectation;

})();

Object.prototype.expectCall = function(xpect) {
  var fName, x, _results;
  if (this.debug) {
    console.log('\n', 'expectCall() runs with:', xpect, '\n');
  }
  _results = [];
  for (fName in xpect) {
    x = new Expectation(fName, xpect[fName], this[fName], this);
    _results.push(Nez.expectArray.push(x));
  }
  return _results;
};

module.exports = Nez;

// Generated by CoffeeScript 1.6.3
var coffee, defer, fs, hostname, notice, phrase, withError;

fs = require('fs');

defer = require('when').defer;

coffee = require('coffee-script');

hostname = require('os').hostname;

notice = require('notice');

phrase = require('phrase');

withError = function(errno, code, message) {
  var error;
  error = new Error(message);
  error.errno = errno;
  error.code = code;
  return error;
};

module.exports.runRealizer = function(_arg) {
  var init, opts, phraseRecursor, realizerFn, running, uplink;
  uplink = _arg.uplink, opts = _arg.opts, realizerFn = _arg.realizerFn;
  running = defer();
  opts.notice = uplink;
  phraseRecursor = phrase.createRoot(opts, function(token) {});
  init = function() {
    return phraseRecursor('realizer', realizerFn);
  };
  uplink.use(function(msg, next) {
    /* realizer middleware 1*/

    var error, key;
    switch (msg.direction) {
      case 'out':
        switch (msg.event) {
          case 'connect':
          case 'reconnect':
          case 'ready':
          case 'error':
            msg.uuid = opts.uuid;
            msg.pid = process.pid;
            msg.hostname = hostname();
            console.log({
              SENDING: msg.context
            }, msg);
            return next();
          default:
            console.log({
              SENDING: msg.context
            }, msg);
            return next();
        }
        break;
      case 'in':
        console.log({
          RECEIVING: msg.context
        }, msg);
        switch (msg.event) {
          case 'reject':
            error = new Error(msg.event);
            error.errno = 101;
            for (key in msg) {
              error[key] = msg[key];
            }
            return running.reject(error);
          case 'init':
            return init().then(function(result) {
              return uplink.event.good('ready');
            }, function(error) {
              var payload;
              payload = {
                error: error
              };
              try {
                payload.stack = error.stack;
              } catch (_error) {}
              return uplink.event.bad('error', payload);
            });
          default:
            return next();
        }
    }
  });
  return running.promise;
};

module.exports.startNotifier = function(_arg) {
  var opts, realizerFn, start;
  opts = _arg.opts, realizerFn = _arg.realizerFn;
  start = defer();
  process.nextTick(function() {
    var key, origin;
    if (opts.connect == null) {
      return start.resolve({
        uplink: notice.create("" + opts.uuid),
        opts: opts,
        realizerFn: realizerFn
      });
    }
    origin = {};
    for (key in opts) {
      if (key === 'connect') {
        continue;
      }
      origin[key] = opts[key];
    }
    opts.origin = origin;
    return notice.connect("" + opts.uuid, opts, function(error, uplink) {
      if (error != null) {
        return start.reject(error);
      }
      return start.resolve({
        uplink: uplink,
        opts: opts,
        realizerFn: realizerFn
      });
    });
  });
  return start.promise;
};

module.exports.loadRealizer = function(params) {
  var connect, filename, https, load, port, secret;
  if (params == null) {
    params = {};
  }
  filename = params.filename;
  connect = params.connect;
  https = params.https;
  port = params.port;
  secret = process.env.SECRET;
  load = defer();
  process.nextTick(function() {
    var error, realizer, realzerFn;
    if (filename == null) {
      return load.reject(withError(101, 'MISSING_ARG', 'missing realizerFile'));
    }
    try {
      realizer = fs.readFileSync(filename, 'utf8');
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      if (filename.match(/[coffee|litcoffee]$/)) {
        realizer = coffee.compile(realizer, {
          bare: true
        });
      }
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      realizer = eval(realizer);
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    realzerFn = realizer.realize || function(Signature) {
      return Signature('Title', function(end) {
        return end();
      });
    };
    delete realizer.realize;
    if (connect != null) {
      realizer.connect = {
        transport: https ? 'https' : 'http',
        secret: secret,
        port: port
      };
    }
    return load.resolve({
      opts: realizer,
      realizerFn: realzerFn
    });
  });
  return load.promise;
};

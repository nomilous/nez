// Generated by CoffeeScript 1.6.3
var Develop, Objective, basename, coffee, dirname, extname, fs, inflection, mkdirp, tools, uuid, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Objective = require('../objective/objective');

tools = require('../tools');

fs = require('fs');

mkdirp = require('mkdirp');

uuid = require('node-uuid');

inflection = require('inflection');

coffee = require('coffee-script');

_ref = require('path'), extname = _ref.extname, dirname = _ref.dirname, basename = _ref.basename;

Develop = (function(_super) {
  __extends(Develop, _super);

  function Develop() {
    _ref1 = Develop.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Develop.prototype.configure = function(opts, done) {
    var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9;
    this.opts = opts;
    if ((this.opts.relativePath != null) && this.opts.relativePath !== '') {
      console.log('ERROR: Develop objective must be run in local directory (repo root dir).');
      if (this.opts.relativePath !== 'node_modules/mocha/lib') {
        process.exit(1);
      }
    }
    (_base = this.opts).boundry || (_base.boundry = ['spec']);
    (_base1 = this.opts).src || (_base1.src = {});
    (_base2 = this.opts.src).directory || (_base2.directory = 'src');
    (_base3 = this.opts.src).match || (_base3.match = /\.coffee$/);
    (_base4 = this.opts.src).out || (_base4.out = 'lib');
    if ((_base5 = this.opts).autospawn == null) {
      _base5.autospawn = true;
    }
    if ((_base6 = this.opts).autocompile == null) {
      _base6.autocompile = true;
    }
    if ((_base7 = this.opts).autospec == null) {
      _base7.autospec = true;
    }
    if ((_base8 = this.opts).autoload == null) {
      _base8.autoload = true;
    }
    if ((_base9 = this.opts).autorun == null) {
      _base9.autorun = true;
    }
    return done();
  };

  Develop.prototype.defaultObjective = function(spec) {
    return spec.link({
      directory: 'spec'
    });
  };

  Develop.prototype.startScheduler = function(monitor, jobTokens, jobEmitter) {
    var _this = this;
    this.jobTokens = jobTokens;
    this.jobEmitter = jobEmitter;
    monitor.dirs.add(this.opts.src.directory, this.opts.src.match, 'src');
    monitor.dirs.on('create', function(filename, stats, ref) {
      if (ref !== 'src') {
        return;
      }
      return _this.handleCreatedSourceFile(filename);
    });
    monitor.dirs.on('change', function(filename, stats, ref, realizer) {
      var specFile;
      if (ref === 'src') {
        specFile = _this.toSpecFilename(filename);
        return monitor.realizers.get({
          filename: specFile
        }).then(function(realizer) {
          return _this.handleChangedSourceFile(filename, realizer);
        }, function(error) {
          return console.log({
            ERROR_GETTING_REALIZER: error
          });
        });
      } else {
        return _this.handleChangedSpecFile(filename, realizer);
      }
    });
    return monitor.dirs.on('delete', function(filename, stats, ref) {
      if (ref !== 'src') {
        return;
      }
      return _this.handleDeletedSourceFile(filename);
    });
  };

  Develop.prototype.toSpecFilename = function(filename) {
    var extName, specDir, specFile, srcDir;
    srcDir = this.opts.src.directory;
    specDir = this.opts.boundry[0];
    specFile = filename.replace(new RegExp("^" + srcDir), specDir);
    extName = extname(specFile);
    return specFile = specFile.replace(extName, ("_" + specDir) + extName);
  };

  Develop.prototype.handleDeletedSourceFile = function(filename) {
    return console.log({
      deleted: filename
    });
  };

  Develop.prototype.handleCreatedSourceFile = function(filename) {
    var className, class_name, error, humanName, specDir, specFile, uniqueName;
    if (!this.opts.autospec) {
      return;
    }
    specFile = this.toSpecFilename(filename);
    specDir = dirname(specFile);
    try {
      return fs.lstatSync(specFile);
    } catch (_error) {
      error = _error;
      if (error.errno !== 34) {
        return;
      }
    }
    try {
      fs.lstatSync(specDir);
    } catch (_error) {
      error = _error;
      if (error.errno === 34) {
        mkdirp.sync(specDir);
      }
    }
    class_name = basename(filename).replace(extname(filename), '');
    humanName = inflection.titleize(class_name);
    className = inflection.classify(class_name);
    uniqueName = uuid.v1();
    return fs.writeFileSync(specFile, "title: '" + humanName + "'\nuuid:  '" + uniqueName + "'\nrealize: (context, " + className + ", should) -> \n");
  };

  Develop.prototype.handleChangedSourceFile = function(filename, _arg) {
    var compiled, error, notice, outDir, outFile, reload, source, specfile, srcDir, token;
    token = _arg.token, notice = _arg.notice;
    if (!this.opts.autocompile) {
      return;
    }
    srcDir = this.opts.src.directory;
    outFile = filename.replace(new RegExp("^" + srcDir), this.opts.src.out).replace(extname(filename), '.js');
    outDir = dirname(outFile);
    try {
      fs.lstatSync(outDir);
    } catch (_error) {
      error = _error;
      if (error.errno === 34) {
        mkdirp.sync(outDir);
      }
    }
    try {
      source = fs.readFileSync(filename).toString();
      compiled = coffee.compile(source, {
        bare: true,
        header: true,
        literate: filename.match(/litcoffee$/) != null
      });
      fs.writeFileSync(outFile, compiled);
    } catch (_error) {
      error = _error;
      console.log('COMPILE ERROR:', error);
      return;
    }
    specfile = this.toSpecFilename(filename);
    return this.handleChangedSpecFile(specfile, {
      token: token,
      notice: notice
    }, reload = false);
  };

  Develop.prototype.handleChangedSpecFile = function(filename, _arg, reload) {
    var notice, token;
    token = _arg.token, notice = _arg.notice;
    if (reload == null) {
      reload = true;
    }
    if (reload) {
      return console.log({
        RELOAD_AND_RUN_SPEC: filename
      });
    } else {
      return console.log({
        RUN_SPEC: filename
      });
    }
  };

  return Develop;

})(Objective);

module.exports = Develop;

// Generated by CoffeeScript 1.6.3
var Develop, Objective, Realize, extname, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Objective = require('../objective/objective');

Realize = require('../realization/realize');

extname = require('path').extname;

Develop = (function(_super) {
  __extends(Develop, _super);

  function Develop() {
    _ref = Develop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Develop.prototype.configure = function(opts, done) {
    var _base, _base1, _base2, _base3, _base4, _base5, _base6;
    this.opts = opts;
    if ((this.opts.relativePath != null) && this.opts.relativePath !== '') {
      console.log('ERROR: Develop objective must be run in local directory (repo root dir).');
      if (this.opts.relativePath !== 'node_modules/mocha/lib') {
        process.exit(1);
      }
    }
    (_base = this.opts).boundry || (_base.boundry = ['spec']);
    (_base1 = this.opts).src || (_base1.src = {});
    (_base2 = this.opts.src).directory || (_base2.directory = 'src');
    (_base3 = this.opts.src).match || (_base3.match = /\.coffee$/);
    (_base4 = this.opts).autospawn || (_base4.autospawn = true);
    (_base5 = this.opts).autocompile || (_base5.autocompile = true);
    (_base6 = this.opts).autospec || (_base6.autospec = true);
    return done();
  };

  Develop.prototype.defaultObjective = function(spec) {
    return spec.link({
      directory: 'spec'
    });
  };

  Develop.prototype.onBoundryAssemble = function(opts, callback) {
    return Realize.loadRealizer(opts).then(function(realizer) {
      var phrase;
      phrase = {
        title: realizer.opts.title,
        control: realizer.opts,
        fn: realizer.realizerFn
      };
      delete phrase.control.title;
      opts.loadTree = false;
      return callback(null, phrase);
    }, function(error) {
      return callback(error);
    });
  };

  Develop.prototype.startMonitor = function(monitor, jobTokens, jobEmitter) {
    var _this = this;
    this.jobTokens = jobTokens;
    this.jobEmitter = jobEmitter;
    monitor.dirs.add(this.opts.src.directory, this.opts.src.match, 'src');
    monitor.dirs.on('create', function(filename, stats, ref) {
      if (ref !== 'src') {
        return;
      }
      return _this.handleCreatedSourceFile(filename);
    });
    monitor.dirs.on('change', function(filename, stats, ref, realizer) {
      var specFile;
      if (ref === 'src') {
        specFile = _this.toSpecFilename(filename);
        return monitor.realizers.get({
          filename: specFile
        }).then(function(realizer) {
          return _this.handleChangedSourceFile(filename, realizer);
        }, function(error) {
          return console.log({
            ERROR_GETTING_REALIZER: error
          });
        });
      } else {
        return _this.handleChangedSpecFile(filename, realizer);
      }
    });
    return monitor.dirs.on('delete', function(filename, stats, ref) {
      if (ref !== 'src') {
        return;
      }
      return _this.handleDeletedSourceFile(filename);
    });
  };

  Develop.prototype.toSpecFilename = function(filename) {
    var extName, specDir, specFile, srcDir;
    srcDir = this.opts.src.directory;
    specDir = this.opts.boundry[0];
    specFile = filename.replace(new RegExp("^" + srcDir), specDir);
    extName = extname(specFile);
    return specFile = specFile.replace(extName, ("_" + specDir) + extName);
  };

  Develop.prototype.handleCreatedSourceFile = function(filename) {
    return console.log({
      created: filename
    });
  };

  Develop.prototype.handleDeletedSourceFile = function(filename) {
    return console.log({
      deleted: filename
    });
  };

  Develop.prototype.handleChangedSourceFile = function(filename) {
    return console.log({
      changed: filename
    });
  };

  Develop.prototype.handleChangedSourceFile = function(filename, _arg) {
    var notice, token;
    token = _arg.token, notice = _arg.notice;
    return notice.info('subject', {
      to: 'realizer',
      from: 'objective',
      changed: filename
    });
  };

  Develop.prototype.handleChangedSpecFile = function(filename, _arg) {
    var notice, token;
    token = _arg.token, notice = _arg.notice;
    return notice.info('subject', {
      to: 'realizer',
      from: 'objective',
      changed: filename
    });
  };

  return Develop;

})(Objective);

module.exports = Develop;

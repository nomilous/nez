// Generated by CoffeeScript 1.4.0
var Coffee, child_process, colors, fs, hound, i, path;

child_process = require('child_process');

colors = require('colors');

hound = require('hound');

path = require('path');

fs = require('fs');

i = require('inflection');

module.exports = Coffee = (function() {

  function Coffee(program) {
    var app, dir;
    this.program = program;
    try {
      dir = fs.lstatSync('./lib');
      if (dir.isDirectory) {
        app = './lib';
      }
    } catch (_error) {}
    try {
      dir = fs.lstatSync('./app');
      if (dir.isDirectory) {
        if (app) {
          console.log('Appologies. Supports ./app OR ./lib dirs. Not both.');
          return;
        }
        app = './app';
      }
    } catch (_error) {}
    this.config = {
      spec: this.program.specdir || './spec',
      src: this.program.srcdir || './src',
      app: app || './app'
    };
  }

  Coffee.prototype.start = function() {
    var missing, parameter, _i, _len, _ref;
    console.log("(config)", this.config);
    missing = [];
    _ref = ['spec', 'src'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      parameter = _ref[_i];
      if (!fs.existsSync(this.config[parameter])) {
        missing.push(this.config[parameter]);
      }
    }
    if (missing.length > 0) {
      console.log('Expected directory(ies):'.red.bold, missing.toString());
      return;
    }
    this.watch('spec', this.onchange);
    return this.watch('src', this.onchange);
  };

  Coffee.prototype.done = function(file) {
    return console.log('(done)', file);
  };

  Coffee.prototype.watch = function(what, onchange) {
    var watcher,
      _this = this;
    console.log('(watch)', this.config[what]);
    watcher = hound.watch(this.config[what]);
    return watcher.on('change', function(file, stats) {
      return _this.onchange(what, file, stats);
    });
  };

  Coffee.prototype.onchange = function(what, file, stats) {
    var _this = this;
    switch (what) {
      case 'spec':
        return this.test(file, function() {});
      case 'src':
        return this.compile(file, function() {
          return _this.test(_this.toSpec(file), function() {
            return _this.done(file);
          });
        });
      case 'app':
        return this.test(this.toSpec(file));
    }
  };

  Coffee.prototype.compile = function(file, after) {
    var builder, compiler, options, outDir;
    outDir = file.match(/^.*\//)[0].replace(new RegExp("^\.\/" + this.config.src.slice(2)), "" + this.config.app);
    compiler = this.getCompiler();
    console.log('(compile)', file);
    options = ['-c', '-b', '-o', outDir, file];
    builder = child_process.spawn(compiler, options);
    builder.stdout.pipe(process.stdout);
    builder.stderr.pipe(process.stderr);
    return builder.on('exit', function() {
      return after();
    });
  };

  Coffee.prototype.getCompiler = function() {
    var nezRoot;
    nezRoot = __dirname.match(/^(.*\/nez\/)(.*)/)[1];
    return nezRoot + 'node_modules/.bin/coffee';
  };

  Coffee.prototype.toSpec = function(file) {
    var specFile;
    return specFile = file.replace(new RegExp("^\.\/" + this.config.src.slice(2)), "" + this.config.spec).replace(/\.coffee$/, "_spec.coffee");
  };

  Coffee.prototype.test = function(file, after) {
    var test_runner;
    console.log("(spec)", file);
    if (!fs.existsSync(file)) {
      return this.noSpecFile(file, after);
    } else {
      test_runner = this.getCompiler();
      test_runner = child_process.spawn(this.getCompiler(), [file]);
      test_runner.stdout.pipe(process.stdout);
      test_runner.stderr.pipe(process.stderr);
      return test_runner.on('exit', function() {
        return after();
      });
    }
  };

  Coffee.prototype.noSpecFile = function(file, after) {
    var parts;
    parts = this.klast(file);
    if (this.program.noautospec) {
      return;
    }
    if (!fs.existsSync(parts.path)) {
      this.mkdirMinusP(parts.path);
    }
    return fs.writeFile(parts.path + parts.specname, "require('nez').realize '" + parts.classname + "', (" + parts.classname + ", test, context) -> \n\n    context 'in CONTEXT', (does) ->\n\n        does 'an EXPECTATION', (done) ->\n\n            test done\n", function(err) {
      if (err) {
        console.log('failed to create file:', file);
        return;
      }
      console.log('generated:', file);
      return after();
    });
  };

  Coffee.prototype.klast = function(file) {
    var part, parts, rpath, _i, _len, _ref;
    parts = file.match(/^(.*\/)(.*)_spec\..*$/);
    rpath = '';
    _ref = file.split('/').slice(2);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      part = _ref[_i];
      rpath += '../';
    }
    rpath = (rpath += parts[1]).replace("./" + this.config.spec, "" + this.config.app);
    return {
      path: parts[1],
      specname: "" + parts[2] + "_spec.coffee",
      filename: "" + parts[2] + ".coffee",
      require: "" + rpath + parts[2],
      classname: i.classify(parts[2])
    };
  };

  Coffee.prototype.mkdirMinusP = function(path) {
    var dir, minusP, _i, _len, _ref, _results;
    minusP = '';
    _ref = path.split('/');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dir = _ref[_i];
      if (dir === '') {
        continue;
      }
      minusP += dir + '/';
      if (!fs.existsSync(minusP)) {
        console.log("mkdir:", minusP);
        _results.push(fs.mkdirSync(minusP));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Coffee;

})();

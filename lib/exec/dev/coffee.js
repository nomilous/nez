// Generated by CoffeeScript 1.4.0
var Coffee, child_process, fs, hound;

child_process = require('child_process');

hound = require('hound');

fs = require('fs');

module.exports = Coffee = (function() {

  function Coffee(program) {
    var app, dir;
    this.program = program;
    try {
      dir = fs.lstatSync('./lib');
      if (dir.isDirectory) {
        app = './lib';
      }
    } catch (_error) {}
    try {
      dir = fs.lstatSync('./app');
      if (dir.isDirectory) {
        if (app) {
          console.log('Appologies. Supports ./app OR ./lib dirs. Not both.');
          return;
        }
        app = './app';
      }
    } catch (_error) {}
    this.config = {
      spec: this.program.specdir || './spec',
      src: this.program.srcdir || './src',
      app: app || './app'
    };
  }

  Coffee.prototype.start = function() {
    console.log("running config:", this.config);
    this.watch('spec', this.onchange);
    return this.watch('src', this.onchange);
  };

  Coffee.prototype.done = function(file) {
    return console.log('done: ', file);
  };

  Coffee.prototype.watch = function(what, onchange) {
    var watcher,
      _this = this;
    console.log('Watching: ', this.config[what]);
    watcher = hound.watch(this.config[what]);
    return watcher.on('change', function(file, stats) {
      return _this.onchange(what, file, stats);
    });
  };

  Coffee.prototype.onchange = function(what, file, stats) {
    var _this = this;
    switch (what) {
      case 'spec':
        return this.test(file);
      case 'src':
        return this.compile(file, function() {
          return _this.test(_this.toSpec(file), function() {
            return _this.done(file);
          });
        });
      case 'app':
        return this.test(this.toSpec(file));
    }
  };

  Coffee.prototype.compile = function(file, after) {
    var builder, options, outDir;
    console.log('compile:', file);
    outDir = file.match(/^.*\//)[0].replace(new RegExp("^\.\/" + this.config.src.slice(2)), "" + this.config.app);
    options = ['-c', '-b', '-o', outDir, file];
    builder = child_process.spawn('./node_modules/.bin/coffee', options);
    builder.stdout.pipe(process.stdout);
    builder.stderr.pipe(process.stderr);
    return builder.on('exit', function() {
      return after();
    });
  };

  Coffee.prototype.toSpec = function(file) {
    var specFile;
    return specFile = file.replace(new RegExp("^\.\/" + this.config.src.slice(2)), "" + this.config.spec).replace(/\.coffee$/, "_spec.coffee");
  };

  Coffee.prototype.test = function(file, after) {
    var test_runner;
    console.log("test: ", file);
    test_runner = child_process.spawn('./node_modules/.bin/mocha', ['--colors', '--compilers', 'coffee:coffee-script', file]);
    test_runner.stdout.pipe(process.stdout);
    test_runner.stderr.pipe(process.stderr);
    return test_runner.on('exit', function() {
      return after();
    });
  };

  return Coffee;

})();

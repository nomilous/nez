// Generated by CoffeeScript 1.6.3
var coffee, defer, fs, loadRealizer, notice, phrase, pipeline, program, runRealizer, sequence, startNotifier, startPhrase, startRealizer, withError;

program = require('commander');

fs = require('fs');

coffee = require('coffee-script');

phrase = require('phrase');

defer = require('when').defer;

pipeline = require('when/pipeline');

sequence = require('when/sequence');

notice = require('notice');

program.version(JSON.parse(fs.readFileSync(__dirname + '/../../package.json', 'utf8')).version);

program.usage('[options] [realizer]');

program.option('-c, --connect', 'Establish connection to objective', false);

program.option('-p, --port  <num>      ', 'Objective port', 10001);

program.option('-X, --no-https         ', 'Connect insecurely', false);

program.parse(process.argv);

pipeline([
  function() {
    return loadRealizer(program);
  }, function(realizer) {
    return startRealizer(realizer);
  }, function(controls) {
    return runRealizer(controls);
  }
]).then(function(resolve) {}, function(error) {
  process.stderr.write(error.toString());
  return process.exit(error.errno || 100);
}, function(notify) {});

runRealizer = function(_arg) {
  var notice, token, uplink;
  uplink = _arg.uplink, token = _arg.token, notice = _arg.notice;
  uplink.event('hello', {
    testing: 'UPLINK'
  });
  return token.on('ready', function(_arg1) {
    var path, tokens, _results;
    tokens = _arg1.tokens;
    _results = [];
    for (path in tokens) {
      if (tokens[path].type === 'root') {
        _results.push(token.run(tokens[path]).then(function(resolve) {}, function(reject) {
          return console.log({
            REJECTED: reject
          });
        }, function(notify) {
          if (notify.state === 'run::step:failed') {
            console.log(notify.step.ref.token.signature, notify.step.ref.text);
            return console.log(notify.error.message);
          } else if (notify.state === 'run::complete') {
            return console.log(notify.progress);
          }
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
};

startRealizer = function(realizer) {
  var start;
  start = defer();
  sequence([
    function() {
      return startNotifier(realizer);
    }, function() {
      return startPhrase(realizer);
    }
  ]).then(function(resolve) {
    return start.resolve({
      uplink: resolve[0],
      token: resolve[1].token,
      notice: resolve[1].notice
    });
  }, start.reject);
  return start.promise;
};

startPhrase = function(_arg) {
  var opts, realizerFn, start;
  opts = _arg.opts, realizerFn = _arg.realizerFn;
  start = defer();
  process.nextTick(function() {
    var recursor;
    recursor = phrase.createRoot(opts, function(token, notice) {
      return start.resolve({
        token: token,
        notice: notice
      });
    });
    return recursor('realizer', realizerFn);
  });
  return start.promise;
};

startNotifier = function(_arg) {
  var opts, start;
  opts = _arg.opts;
  start = defer();
  process.nextTick(function() {
    if (opts.connect == null) {
      return start.resolve(null);
    }
    return notice.connect("realizer/" + opts.uuid, opts, function(error, connection) {
      if (error != null) {
        return start.reject(error);
      }
      return start.resolve(connection);
    });
  });
  return start.promise;
};

loadRealizer = function(program) {
  var load;
  load = defer();
  process.nextTick(function() {
    var error, filename, realizer, realzerFn;
    filename = program.args[0];
    if (filename == null) {
      return load.reject(withError(101, 'MISSING_ARG', 'missing realizerFile'));
    }
    try {
      realizer = fs.readFileSync(filename, 'utf8');
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      if (filename.match(/[coffee|litcoffee]$/)) {
        realizer = coffee.compile(realizer, {
          bare: true
        });
      }
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      realizer = eval(realizer);
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    realzerFn = realizer.realize || function(Signature) {
      return Signature('Title', function(end) {
        return end();
      });
    };
    delete realizer.realize;
    if (program.connect) {
      realizer.connect = {
        transport: program.https ? 'https' : 'http',
        secret: 'âˆ«.',
        port: program.port
      };
    }
    return load.resolve({
      opts: realizer,
      realizerFn: realzerFn
    });
  });
  return load.promise;
};

withError = function(errno, code, message) {
  var error;
  error = new Error(message);
  error.errno = errno;
  error.code = code;
  return error;
};

// Generated by CoffeeScript 1.6.3
var Realize, defer, fs, marshalArgs, notice, phrase, pipeline, program, runRealizer, sequence, startNotifier, withError;

program = require('commander');

fs = require('fs');

phrase = require('phrase');

defer = require('when').defer;

pipeline = require('when/pipeline');

sequence = require('when/sequence');

notice = require('notice');

Realize = require('../realization/realize');

program.version(JSON.parse(fs.readFileSync(__dirname + '/../../package.json', 'utf8')).version);

program.usage('[options] [realizer]');

program.option('-c, --connect', 'Establish connection to objective', false);

program.option('-p, --port  <num>      ', 'Objective port', 10001);

program.option('-X, --no-https         ', 'Connect insecurely', false);

program.parse(process.argv);

pipeline([
  function() {
    return marshalArgs(program);
  }, function(params) {
    return Realize.loadRealizer(params);
  }, function(realizer) {
    return startNotifier(realizer);
  }, function(controls) {
    return runRealizer(controls);
  }
]).then(function(resolve) {}, function(error) {
  process.stderr.write(error.toString());
  return process.exit(error.errno || 100);
}, function(notify) {});

runRealizer = function(_arg) {
  var opts, phraseRecursor, realizerFn, uplink;
  uplink = _arg.uplink, opts = _arg.opts, realizerFn = _arg.realizerFn;
  opts.notice = uplink;
  phraseRecursor = phrase.createRoot(opts, function(token) {});
  uplink.event('realizer::connect', {
    uuid: opts.uuid,
    pid: process.pid
  });
  return uplink.use(function(msg, next) {
    console.log({
      RECEIVED: msg
    });
    return next();
  });
};

startNotifier = function(_arg) {
  var opts, realizerFn, start;
  opts = _arg.opts, realizerFn = _arg.realizerFn;
  start = defer();
  process.nextTick(function() {
    if (opts.connect == null) {
      return start.resolve({
        uplink: notice.create("realizer/" + opts.uuid),
        opts: opts,
        realizerFn: realizerFn
      });
    }
    console.log({
      REALIZER_OPTS: opts
    });
    return notice.connect("realizer/" + opts.uuid, opts, function(error, uplink) {
      if (error != null) {
        return start.reject(error);
      }
      return start.resolve({
        uplink: uplink,
        opts: opts,
        realizerFn: realizerFn
      });
    });
  });
  return start.promise;
};

marshalArgs = function(program) {
  var marshal;
  marshal = defer();
  process.nextTick(function() {
    return marshal.resolve({
      filename: program.args[0],
      connect: program.connect,
      https: program.https,
      port: program.port
    });
  });
  return marshal.promise;
};

withError = function(errno, code, message) {
  var error;
  error = new Error(message);
  error.errno = errno;
  error.code = code;
  return error;
};

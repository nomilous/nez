// Generated by CoffeeScript 1.6.3
var coffee, defer, fs, loadRealizer, phrase, pipeline, program, startRealizer, withError;

program = require('commander');

fs = require('fs');

coffee = require('coffee-script');

phrase = require('phrase');

defer = require('when').defer;

pipeline = require('when/pipeline');

program.version(JSON.parse(fs.readFileSync(__dirname + '/../../package.json', 'utf8')).version);

program.usage('[options] [realizer]');

program.parse(process.argv);

pipeline([
  function() {
    return loadRealizer(program);
  }, function(realizer) {
    return startRealizer(realizer);
  }
]).then(function(resolve) {
  return console.log({
    RESOLVED: resolve
  });
}, function(error) {
  process.stderr.write(error.toString());
  return process.exit(error.errno || 1);
}, function(notify) {
  return console.log({
    NOTIFY: notify
  });
});

startRealizer = function(_arg) {
  var opts, realizerFn, recursor;
  opts = _arg.opts, realizerFn = _arg.realizerFn;
  recursor = phrase.createRoot(opts, function(token) {
    return token.on('ready', function(_arg1) {
      var path, tokens, _results;
      tokens = _arg1.tokens;
      _results = [];
      for (path in tokens) {
        if (tokens[path].type === 'root') {
          _results.push(token.run(tokens[path]).then(function(resolve) {
            return console.log({
              RESOLVED: resolve
            });
          }, function(reject) {
            return console.log({
              REJECTED: reject
            });
          }, function(notify) {
            return console.log({
              NOTIFY: notify
            });
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  });
  return recursor('realizer', realizerFn);
};

loadRealizer = function(program) {
  var load;
  load = defer();
  process.nextTick(function() {
    var error, filename, realizer, realzerFn;
    filename = program.args[0];
    if (filename == null) {
      return load.reject(withError(100, 'MISSING_ARG', 'missing realizerFile'));
    }
    try {
      realizer = fs.readFileSync(filename, 'utf8');
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      if (filename.match(/[coffee|litcoffee]$/)) {
        realizer = coffee.compile(realizer, {
          bare: true
        });
      }
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    try {
      realizer = eval(realizer);
    } catch (_error) {
      error = _error;
      return load.reject(error);
    }
    realzerFn = realizer.realize || function(Signature) {
      return Signature('Title', function(end) {
        return end();
      });
    };
    delete realizer.realize;
    return load.resolve({
      opts: realizer,
      realizerFn: realzerFn
    });
  });
  return load.promise;
};

withError = function(errno, code, description) {
  var error;
  error = new Error(description);
  error.errno = errno;
  error.code = code;
  return error;
};
